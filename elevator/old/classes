# Class to hold data about the system state
# Every elevator has one, and they should be identical
SYSTEM OVERVIEW:
    new elevators that come online are added here, with list of their jobs
        ([(elevator1, [list up], [list down])])
    keeps a list of elevators and their last still-alive-signal as a tuple
        example: ([(elevator1, 18:37:21), (elevator2, 18:37:20)])
        
        
# Controls the elevator        
CONTROLLER:
    - Takes care of I/O with the driver
    - Check time since last alive-messages
        * if manager is offline
            - compare own age against all others, if oldest become manager
            - notify other elevators of manager status
        * if other elevators offline
            - remove from list of elevators
    - Move up
    - Move down
    - Stop
    - Start
    - Let people on/off
    
# Represents an order   
ORDER:
    int floor
    String direction
    
    
# Elevator class
ELEVATOR:
    - Needs to know it's own IP
    - Keep track of state (going up or down, idle or obstructed)
    - Networking part, ability to send and receive orders and messages


# Object representing online elevator    
PEER:
    - Data fields
        * IP
        * status
        * manager
        * last alive
        * age
        * jobs
    - Getters/Setters
        * last alive
        * IP
        * status
        * manager

# Represents a message
MESSAGE:
    - New order (broadcast to all)
    - Order from manager (send to one elevator, which executes order)
    - Still-alive
    - Job done
    - Obstructed
    - Elevator state

# Handles the communication
NETWORK:
    - broadcast still-alive
    - receive still-alive
    - receive orders
    - if elevator is manager; send out orders

# Runs at start up, sets up everything
INITIALIZE_ELEVATOR:
    - Set everything up: elevator-, controller-class etc.
    - get networking part up and running
        * retrieve own IP-address
        * set up sockets and ports
    - check that everything works
    - wait a set period for incoming messages, if none assume alone and become manager
    - broadcast it's existence and wait for orders
    
    

# First elevator that comes online becomes the manager
# If manager goes offline, oldest elevator takes over    
MANAGER:
    - When a new job arrives, finds the elevator best suited to handle it
    
    
    
