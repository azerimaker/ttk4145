from driver import *
from channels import *
from State import *
from time import sleep

command_buttons = [0]*4
speed = 250
UP = 0
DOWN = 1
NONE = 0
NO_FLOORS = 4

class Elevator:

    def __init__(self):
        # TODO: this class should implement functionality for interfacing with the driver
        # TODO: update both state object and physical elevator
        self.state = State()
        
        
        driver.addListener(INPUT.UP_BUTTONS, self.up_button_pushed)
        driver.addListener(INPUT.DOWN_BUTTONS, self.down_button_pushed)
        driver.addListener(INPUT.IN_BUTTONS, self.command_button_pushed)
        driver.addListener(INPUT.SENSORS, self.signal_floor_sensor)
        driver.addListener(INPUT.STOP, self.signal_stop)
        driver.addListener(INPUT.OBSTRUCTION, self.signal_obstruction)
        
        driver.reset_all_lamps()
        driver.setChannel(OUTPUT.LIGHT_STOP, 0)
        
        # run the elevator to the firest floor to begin with. 
        self.boot = True
        self.state.direction = 1
        driver.set_speed(-speed)

        
    def run(self):
        
        while 1:
            continue 
        return 0
    
    def update_state(self):
        # TODO: update state
        if self.boot:
            return
        if self.state.obstructed or self.state.doors_open or self.state.stopped:
            return
        else:
            # se if there are more orders above you. 
            call_up = False
            for a in self.state.orders[UP]:
                if a == self.state.id:
                    call_up = True
                    break

            # se if there are orders benethe you. 
            call_down = False
            for a in self.state.orders[DOWN]:
                if a == self.state.id:
                    call_down = True
                    break

                
            calls_over = False
            calls_under = False
            for i in range(len(self.state.commands)):
                if i+1 > self.state.floor and self.state.commands[i] == self.state.id:
                    calls_over = True
                elif i+1 < self.state.floor and self.state.commands[i] == self.state.id:
                    calls_under = True
                            
            # delete commands job from list.
            if self.state.commands[self.state.floor-1] == self.state.id:
                self.floor_stop()
                self.state.commands[self.state.floor] = 0       
                driver.setChannel(OUTPUT.IN_LIGHTS[self.state.floor-1], 0)
                            
            # if all the internal order are 0(done) then the elevator goes to complete state. 
            count = 0
            for c in self.state.commands:
                if c == self.state.id:
                    count += 1
                    #print "count ", count
            print "count", count 
            if count == 0:
                self.state.COMPLETE = True
            else:
                self.state.COMPLETE = False
                        
            print "Calls over: ", calls_over, "\nCalls under: ", calls_under


            self.state.complete = False                
            if (calls_over or call_up) and not (calls_under or call_down):
                self.state.direction = UP
            elif (calls_under or call_down) and not (calls_over or call_up):
                self.state.direction = DOWN
            elif (calls_under or call_down) and self.state.direction == DOWN:
                self.state.direction = DOWN
            elif (calls_over or call_up) and self.state.direction == UP:
                self.state.direction = UP
            else:
                self.state.direction = NONE
                self.state.complete = True
            
            print "New direction :", self.state.direction
            
            orderId = self.state.orders[self.state.direction][self.state.floor-1]
            if orderId == self.state.id or self.state.commands[self.state.floor-1]:
                print "Inside if orderId==self.id", orderId, self.state.id
#                    self.floor_stop()
                if orderId == self.state.id:
                    self.state.orders[self.state.direction][self.state.floor-1] = 0
                    self.state.complete = True
                else:
                    self.state.complete = False
                self.state.commands[self.state.floor-1] = 0
                
        if self.boot:
            self.state.complete = False

        print "Orders:", self.state.orders   
        print "Commands:", self.state.commands      
        print self.state
        self.update_physical()
        
    def update_physical(self):
        
        
        if self.state.direction == UP:
            driver.set_speed(speed)
        elif self.state.direction == DOWN:
            driver.set_speed(speed*-1)
        else:
            driver.set_speed(0)
        
        """
        # update lights. 
        for direction in range(2):
            for floor in range(NO_FLOORS):
                if self.state.orders[direction][floor] == self.state.id and direction == DOWN:
                    driver.setChannel(OUTPUT.DOWN_LIGHTS[floor-1], 1)
                elif self.state.orders[direction][floor] != self.state.id and direction == DOWN:
                    driver.setChannel(OUTPUT.DOWN_LIGHTS[floor-1], 0)
                if self.state.orders[direction][floor] == self.state.id and direction == UP:
                    driver.setChannel(OUTPUT.UP_LIGHTS[floor-1], 1)
                elif self.state.orders[direction][floor] != self.state.id and direction == UP:
                    driver.setChannel(OUTPUT.UP_LIGHTS[floor-1], 0)
       """
                    
        # update the indicator lights. WORKS
        driver.setFloorIndicator(self.state.floor)
        
       # if the stop button is pushed.  WORKS
        if self.state.stopped:
            print "STOP"
            driver.stop()
        else:
            if self.state.direction == UP:
                driver.set_speed(speed)
            elif self.state.direction == DOWN:
                driver.set_speed(speed*-1)
                
        
            
        # if the elevator has no orders. do not move. 
        if self.state.complete == True:
            driver.stop()
        
    def floor_stop(self):
        speed_now = ""

        #Stop elevator to let people 
        driver.set_speed(0)
        driver.set_door_open_lamp(1)
        self.state.at_floor = True
        self.state.doors_open = True
        sleep(0.5)
        self.state.doors_open = False
        self.state.at_floor = False
        driver.set_door_open_lamp(0)  
        
        
        if self.state.direction == UP:
            speed_now = 250
        else:
            speed_now = -250       
          
        driver.set_speed(speed_now)
        # TODO: new thread that waits DOOR_OPEN_TIME before starting the elevator again
        # in thread; while still waiting, or obstructed, sleep
        # when wait over, and no obstruction, state.doors.open = False
        
    def addOrder(self, floor, direction):
        self.state.orders[direction][floor-1] = self.state.id
        

    ############################
    #### INTERFACE METHODS #####
    ############################

    '''
    BEGIN CALLBACK METHODS FOR INPUT
    '''
    # Callback funtion that handles the elevator reaching a floor
    def signal_floor_sensor(self, floor, value):
        current_floor = driver.channelToFloor(floor)[0]
        self.state.floor = current_floor
        self.state.at_floor = True
        print current_floor
        self.update_state()
        if current_floor == 1:
            if self.boot:
                driver.set_speed(0)
                self.boot = False
                print "boot complete"
                return
            driver.set_speed(0)
            self.state.direction = UP
        elif current_floor == 4:
            driver.set_speed(0)
            self.state.direction = DOWN
            
        print "Arrived at floor", current_floor
    '''    
    # Callback for elevator buttons being pushed
    def signal_button_pushed(floor, direction):
        floor = driver.channelToFloor(floor)[0]
        print floor, direction
        lamps = [[0 for x in range(4)] for x in range(3)]
        lamps[direction][floor-1] ^= 1
        driver.set_button_lamp(direction, floor-1, lamps[direction][floor-1])
        
        print "Button pushed for floor", floor, "call", direction
    '''    

    # buttons inside the elevator
    def command_button_pushed(self, channel, value):
    #        print "channel", channel
    #        print "value", value
        floor = driver.channelToFloor(channel)[0]
        command_buttons[floor-1] ^= 1
        self.state.commands[floor-1] = self.state.id
        self.state.complete = False
        self.update_state()
        print floor
        if floor == 1:
            driver.setChannel(OUTPUT.LIGHT_COMMAND1, command_buttons[floor-1])
        if floor == 2:
            driver.setChannel(OUTPUT.LIGHT_COMMAND2, command_buttons[floor-1])
        if floor == 3:
            driver.setChannel(OUTPUT.LIGHT_COMMAND3, command_buttons[floor-1])
        if floor == 4:
            driver.setChannel(OUTPUT.LIGHT_COMMAND4, command_buttons[floor-1])
            
    # the buttons for requesting an elevator to go up from this floor
    def up_button_pushed(self, channel, value):
    #        print "up button"
    #        print "channel", channel
    #        print "value", value
        floor = driver.channelToFloor(channel)[0]
        print "up button pushed in:", floor
    #    self.newOutgoingOrder(floor, UP)
        self.addOrder(floor, UP)
        self.update_state()
        
    # the buttons to request a downgoing elevator from this floor. 
    def down_button_pushed(self, channel, value):
    #        print "down button"
    #        print "channel", channel
    #        print "value", value
        floor = driver.channelToFloor(channel)[0]
        print "down button pushed in :", floor
    #    driver.setChannel(OUTPUT.DOWN_LIGHTS[floor-2], value)
    #    self.newOutgoingOrder(floor, DOWN)
        self.addOrder(floor, DOWN)
        self.update_state()
        
    # STOP notification function        
    def signal_stop(self, channel, value):
        print "stopp!!!!"
        if self.state.stopped:
            self.state.stopped = False
            driver.setChannel(OUTPUT.LIGHT_STOP, 0)
        else: 
            self.state.stopped = True
            driver.setChannel(OUTPUT.LIGHT_STOP, 1)
        self.update_physical()
        
    # Obstruction notification function
    def signal_obstruction(self, channel, value):
        print "obstruction value:", value
        if self.state.obstructed:
            self.state.obstructed = False
        elif self.state.obstructed == False and self.state.at_floor == True:
            self.state.obstructed = True
        self.update_physical()


        """
        print "OBSTRCUTION!"
        driver.stop()
        driver.setChannel(OUTPUT.DOOR_OPEN, 1)
        # while the elevator is still obstructed. 
        while self.state.OBSTRUCTION:
            # if the obstruction switch is flipped off, resume operation. 
            if not driver.readChannel(INPUT.OBSTRUCTION):
                self.state.OBSTRUCTION = False
            sleep(0.3)
        driver.setChannel(OUTPUT.DOOR_OPEN, 0)
        print "OBSTRUCTION cleared"
        """
    '''
    END CALLBACK METHODS FOR INPUT
    '''

    '''
    BEGIN METHODS FOR OUTPUT
    '''

            
    '''
    END METHODS FOR OUTPUT
    '''


